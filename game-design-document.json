{
  "meta": {
    "title": "StoneFall — Production Game Design Document",
    "version": "4.0",
    "author": "StoneFall Team",
    "date_created": "2025-10-29",
    "purpose": "Document the shipped StoneFall experience built with React, @react-three/fiber, and ThreeJS on Reddit's developer platform, including current gameplay, technology, and roadmap."
  },

  "high_level_game_concept": {
    "elevator_pitch": "StoneFall is a precision stacking game where glowing blocks sweep across a tower on alternating axes and players tap to drop them in perfect alignment. Short, rhythmic sessions pair with cinematic neon visuals and instant social sharing inside Reddit posts.",
    "core_experience": "One-touch timing with escalating pressure: sustain perfect placements to grow the tower, amplify multipliers, and showcase your best runs to the community. Average sessions last 10–45 seconds, encouraging quick retries and viral sharing."
  },

  "design_principles": {
    "references": ["Jesse Schell - The Art of Game Design (lenses applied)"],
    "principles": [
      "Keep the single-tap input readable and rewarding across touch and desktop.",
      "Deliver tight session loops that invite instant replays and sharing.",
      "Maintain deterministic verification to protect leaderboards while respecting platform limits.",
      "Prioritize mobile-friendly neon visuals with strong silhouette clarity.",
      "Design systems that fit Reddit's developer platform constraints (no WebSockets, 30-second HTTP ceiling)."
    ]
  },

  "platform_constraints_and_implications": {
    "platform_limits": {
      "no_websockets": true,
      "http_request_timeout_seconds": 30,
  "store_namespaced_per_install": true,
      "postData_size_limit_bytes": 2048
    },
    "implications": [
      "Verification is asynchronous (enqueue job & background worker). UI must show 'Pending Verification' and poll for results.",
      "Leaderboards are per-post / per-subreddit by default; global leaderboard requires external infrastructure.",
      "Use the Reddit developer platform quickstart template and the built-in key-value capability for queues and leaderboard sorted sets; store per-post top entries in post metadata."
    ]
  },

  "game_mechanics": {
    "core_loop": [
      "Start a run using a deterministic seed from the server (or a local seed while offline).",
      "Spawn an active block that glides across the tower platform on the X axis with easing and back-and-forth motion.",
      "On the next block, flip the travel axis to Z so players alternate directions each drop.",
      "Player taps / clicks / presses space to lock the block at the current position; we sample the position at the nearest simulation tick (60 Hz).",
      "Calculate the overlap between the incoming block and the stack; trim excess overhang and shrink the next block dimensions accordingly.",
      "Award score based on remaining contact area, with perfect overlaps adding combo points and multiplier growth.",
      "End the run when the block misses entirely, contact area falls below the minimum footprint, or the tower topples during the post-drop stability check.",
      "Surface the results screen with share CTA, submit the replay for verification, and project the tower into the shared exploration grid."
    ],
    "controls": {
      "primary": "Tap / Click / Space to drop",
      "alternatives": ["keyboard space for desktop", "accessibility controls (large target)"]
    },
    "simulation_details": {
      "tick_rate": 60,
      "units": "Fixed-point integer math shared between client preview and server verification to eliminate floating-point drift.",
      "motion_functions": {
        "axis_selection": "X and Z axes alternate each block using a deterministic boolean toggle.",
        "position(t)": "Ping-pong easing between platform bounds with configurable speed curves that accelerate deeper into the run."
      },
      "drop_evaluation": "At drop tick T we compute an axis-aligned intersection rectangle, derive the trimmed width and depth, and adjust the next block scale.",
      "failure_states": ["No overlap", "Overlap area below 5% of original footprint", "Block falls below kill plane after physics settle"]
    },
    "scoring_parameters": {
      "base_points_per_block": 100,
      "perfect_alignment_window_px": 4,
      "perfect_alignment_bonus": 250,
      "combo_multiplier_step": 0.4,
      "combo_multiplier_cap": 3.0,
      "streak_break_penalty": "Reset combo multiplier and subtract 150 points",
      "milestone_rewards": [5, 10, 20, 35]
    },
    "modes": [
      {
        "id": "tower_run",
        "name": "Tower Run",
        "description": "Core experience with alternating axis motion, combo scoring, and spectated replay export."
      },
      {
        "id": "tower_gallery",
        "name": "Tower Gallery",
        "description": "Post-run free camera that lets players explore community towers on the shared grid."
      },
      {
        "id": "practice",
        "name": "Practice",
        "description": "Play without leaderboard submission to test timing and accessibility options."
      }
    ]
  },

  "visual_style_and_art_direction": {
    "overall_goal": "Deliver a neon sci-fi tower that reads clearly in Reddit feed thumbnails and shines in fullscreen with cinematic polish.",
    "camera_and_view": {
      "perspective_camera": {
        "type": "PerspectiveCamera (Three.js)",
        "fov": 45,
        "position": [0, 400, 600],
        "lookAt": [0, 200, 0]
      },
      "framing": "vertical-first (4:5) layout for feed thumbnails; camera follow with soft spring to track tower height."
    },
    "materials_and_lighting": {
      "style": "Stylized PBR-lite: clean matte block material with subtle ambient light and emissive accents for active blocks.",
      "materials": {
        "block_base": "MeshStandardMaterial with low roughness and neutral albedo (#F6F4EE) plus gentle ambient occlusion",
        "outline_emissive": "Duplicate mesh rendered with emissive cyan material and outline shader to highlight the timing window",
        "glow": "Billboarded sprite additive glow for perfect placements"
      },
      "lighting": {
        "key": "Soft directional key plus opposing rim highlight; environment map for light wraps"
      }
    },
    "effects_and_postprocessing": {
      "effects": [
        "UnrealBloomPass (for glow/neon)",
        "Depth-of-field (subtle for fullscreen only)",
        "SSAO (small radius, optional for depth)",
        "Outline pass for active block (or custom shader)",
  "Avoid heavy chromatic aberration to preserve readability"
      ],
      "libraries": ["@react-three/postprocessing", "postprocessing", "glsl for small custom shaders"]
    },
    "block_rendering_strategy": {
      "approach": "True 3D block geometry using BoxBufferGeometry for each block for crisp perspective; use InstancedMesh for performance when many blocks exist.",
      "active_block_highlight": "Active block uses an emissive outline pass + wireframe overlay mesh with additive blending for thumbnail readability.",
  "trim_effects": "When a block trims, emit shard particles aligned to the cut plane and fade them with additive blending."
    },
    "particle_and_juice_design": {
      "combined_perfect": "spiral particle emission with subtle camera shake + timeScale slow-mo (0.4x) for 120-180ms",
      "trim_particles": "thin long shard particles biased by block angle",
      "audio": "crisp percussive drop, crystalline perfect chime, layered sting for combined-perfect, muted thud for fail"
    },
    "thumbnail_readability": "Active block must have cyan outline glow and slightly larger outline thickness for small-size silhouette; use silhouette mask when rendering thumbnail to ensure clarity."
  },

  "ui_and_user_experience": {
    "layout": {
      "hud": "score top-right, best below, combo top-left, leaderboard button under score, big translucent TAP button bottom-center for mobile",
  "tutorial_modals": "Quick interactive tutorial teaching alternating axis timing and perfect placement windows",
      "share_modal": "one-tap GIF export + prefilled Reddit post CTA (caption + play link)"
    },
    "verification_status_ui": {
      "local_result": "Show 'LOCAL SCORE: XXXX (Pending Verification)' immediately after run",
      "status_updates": "Polling-based status updates (1s x 10, then backoff) until 'Verified'/'Rejected'",
      "leaderboard_visibility": "Only place runs in public leaderboards when status=verified (or verified-with-tolerance)."
    },
    "accessibility": [
      "reduced_motion toggle (disable heavy motion and shader effects)",
      "high_contrast palette toggle",
      "large_touch targets",
      "audio toggle"
    ]
  },

  "technical_architecture_and_stack": {
    "client_stack": {
      "frameworks": [
        "React (16+/18+)",
        "@react-three/fiber (r3f) for Three.js React integration",
        "@react-three/drei for helpers (OrbitControls, softShadows, Float, Text3D, etc.)",
        "@react-three/postprocessing or postprocessing package for bloom/DOF",
        "zustand or recoil for small client state (optional)",
        "react-spring/three or @react-three/fiber's useFrame for animations"
      ],
      "rendering_strategy": [
        "Use InstancedMesh for block stacks to reduce draw calls",
        "Active block rendered as a unique mesh with outline & emissive pass",
        "Pool meshes & particle systems; lazy-load heavy assets"
      ],
      "determinism_note": "Client must use the same pure simulation math from shared TypeScript library for preview and local scoring; renderer is visual-only (Three.js is not authoritative)."
    },
    "server_stack": {
      "platform": "Reddit developer platform Node server (Express pattern) for endpoints",
      "storage": {
        "primary": "In-memory sorted sets and hashes for leaderboards, runs, and verification queues",
        "post_scoped": "Platform postData storage to keep compact per-post top-three metadata (<=2KB)",
        "offload_plan": "If needed later, offload older runs to external object storage (S3/GCS) and store references in the in-memory store."
      },
      "verification_workers": "Node workers (TypeScript) that import the same shared simulation library to replay runs deterministically.",
      "notes": "Because of the platform request timeout, submit endpoints enqueue work and return quickly; verification runs asynchronously."
    },
    "security_and_auth": {
      "auth": "Use Reddit auth tokens for identifying players where permitted by policy; fallback to anonymous handles or short-lived runToken if needed.",
      "checksum_flow": "Optional runToken + HMAC per-run for integrity checks."
    }
  },

  "challenges_and_solutions": {
    "platform": [
      {
        "challenge": "Per-install storage limits and namespacing within the platform's in-memory store",
        "solution": "Designed compact run objects, aggressively expired stale entries, and cached only per-post top performers in post metadata."
      },
      {
        "challenge": "Strict request duration cap with no WebSockets",
        "solution": "Moved verification to background workers and exposed optimistic UI states with polling."
      }
    ],
    "technical": [
      {
        "challenge": "Maintaining deterministic parity between the real-time client preview and the verification replay",
        "solution": "Shared a pure TypeScript physics/timing library, replaced floating-point math with fixed-point integers, and synced easing tables between client and server."
      },
      {
        "challenge": "Rendering hundreds of towers in the shared world on mobile GPUs",
        "solution": "Implemented instanced meshes, object pooling, and adaptive effect toggles based on runtime heuristics."
      }
    ],
    "design": [
      {
        "challenge": "Encouraging positive social competition without leaderboard fatigue",
        "solution": "Highlighted perfect streaks, surfaced subreddit-level leaderboards, and let players pin favorite community towers."
      }
    ]
  },

  "accomplishments": {
    "technical": [
      "Advanced neon rendering pipeline with custom bloom, outline, and particle effects",
      "Scalable architecture that safely handles concurrent run submissions and verification",
      "Replay system that keeps leaderboards trustworthy without blocking the UI"
    ],
    "design": [
      "Responsive timing feel that rewards rhythm mastery",
      "Shared tower grid that turns individual runs into a community showcase",
      "Seamless integration with Reddit posts for sharing, commenting, and moderation"
    ],
    "platform": [
      "Optimized experience for Reddit's mobile clients with adaptive quality settings"
    ]
  },

  "lessons_learned": {
    "technical": [
      "Fixed-point math and deterministic easing tables are mandatory for cross-device parity.",
      "Instancing, LOD strategies, and effect toggles are key to sustaining 60 fps on mid-tier phones.",
  "In-memory data stores demand careful key naming and TTL discipline to avoid quota issues."
    ],
    "design": [
      "Spatial tower placement lets players co-create emergent narratives.",
      "Clear visual feedback (glow, camera framing, particles) is essential for precision timing games.",
      "Mobile-first UI decisions (large CTAs, concise copy) improve completion rates."
    ],
    "process": [
      "Iterative playtesting with public subreddit volunteers accelerated tuning.",
      "Setting explicit performance budgets early prevented late-stage rewrites.",
      "Cross-discipline alignment meetings kept art, engineering, and moderation goals in sync."
    ]
  },

  "deterministic_simulation_and_anti_cheat": {
    "gold_standard": {
      "approach": "Authoritative server-side deterministic replay using a shared pure TypeScript simulation library that uses fixed timestep and fixed-point integer math.",
      "implementation_guidelines": [
        "Keep simulation pure: no Date/Math.random; use seeded integer PRNG (xorshift/mulberry32) implemented in TS.",
        "Quantize times to tick indices; inputs stored as delta-encoded tick arrays.",
        "Use integer math for positions along both axes (e.g., units * 1000).",
        "Intersection computed with axis-aligned clipping and fixed-point area calculations.",
        "Round and clamp deterministically; publish exact rounding rules in code and tests."
      ]
    },
    "fallback_pragmatic": {
      "approach": "Optimistic submit + checksum + heuristics. Accept runs with checksum and quickly mark as pending; run background verification for suspicious runs.",
      "flow": [
        "Client requests /start_run -> server returns runToken + seed",
        "Client submits compressed_inputs + claimedScore + HMAC(runToken || seed || compressed_inputs), server verifies HMAC and enqueues",
        "Server marks run status as 'pending' and updates client via polling; only verified runs make public leaderboards"
      ],
      "heuristics": [
        "High combined-perfect rate (> threshold)",
        "impossibly high score relative to player's historical mean",
        "excessive submissions per minute (rate-limiting)"
      ]
    },
    "tolerance_policy": {
      "exact_match_threshold": 0,
      "tolerance_mode": "If server_computed_score differs within ±1–3 points (or ≤1% relative), accept as 'verified-with-tolerance' and flag the run for analytics review."
    }
  },

  "replay_blob_spec_and_storage": {
    "format": {
      "seed": "32-bit integer or stable string",
      "tick_rate": 60,
      "inputs": "delta-encoded tick indices (integers), compressed (gzip/deflate), base64 for transport",
      "metadata": { "player_id": "string", "mode": "string", "claimed_score": "int", "duration_ms": "int" }
    },
    "storage_guidelines": {
      "store_key_run": "run:{runId} => hash { compressed_blob, claimed_score, computed_score, status, player_handle }",
      "leaderboard_sorted_set": "leaderboard:{mode} (score => runId)",
      "postData": "post:{postId}:top3 -> compact JSON for instantaneous per-post display (only top-3, <=2KB)",
      "retention": "keep top N runs indefinitely; older runs expire after 30 days or offload to external object store"
    }
  },

  "network_flow_and_api": {
    "endpoints": [
      {
        "method": "POST",
        "path": "/api/v1/start_run",
        "purpose": "Issue runToken and seed for robust checksum flow (optional)",
        "request": "{ player_id (opt), mode }",
        "response": "{ runToken, seed, runId_temp }"
      },
      {
        "method": "POST",
        "path": "/api/v1/submit_run",
        "purpose": "Submit compressed replay + claimed score + checksum; server enqueues verification job and returns runId",
        "request": "{ runToken | seed, compressed_blob, claimed_score, player_handle }",
        "response": "{ runId, status: 'queued' }"
      },
      {
        "method": "GET",
        "path": "/api/v1/run_status/:runId",
        "purpose": "Poll verification status",
        "response": "{ runId, status: 'queued'|'verified'|'rejected'|'verified-with-tolerance', computed_score? }"
      },
      {
        "method": "GET",
        "path": "/api/v1/leaderboard",
        "purpose": "Fetch leaderboard (per-mode, per-subreddit or per-post depending on deployment)",
        "query": "{ mode, range: 'weekly'|'all_time'|'post', postId?, limit?, cursor? }",
        "response": "{ entries: [ { rank, player_handle, score, runId } ], next_cursor }"
      },
      {
        "method": "POST",
        "path": "/api/v1/create_tournament",
        "purpose": "Moderator or system creates a post tournament",
        "auth": "moderator or system",
        "request": "{ post_id, mode, start_at, end_at }",
        "response": "{ tournament_id }"
      }
    ],
    "notes": "All submit endpoints must return quickly (<30s) and enqueue background verification to avoid platform request timeouts."
  },

  "poс_and_validation_plan": {
    "poс_objective": "Prove deterministic parity between client (r3f visuals omitted for logic) and server replays using the shared TS sim library.",
    "duration": "1-2 sprints (1-2 weeks) before building more features",
    "tasks": [
      "Create small pure TypeScript simulation library implementing fixed tick, integer math, PRNG, clipping, scoring",
      "Integrate library into a minimal Node verification worker and a simple client-runner (headless, no renderer) to run thousands of randomized runs",
      "Assert equality of final scores and final tower states across client & server; iterate until deterministic",
      "If unable to achieve parity after effort threshold (e.g., 3 days of iteration), pivot to pragmatic fallback for MVP"
    ],
    "acceptance_criteria": "Zero mismatches across sample (e.g., 10k runs) OR mismatches only within tolerance policy and consistent explainable causes"
  },

  "ui_ux_flow_for_verification": {
    "play_end": "Client shows immediate local result and offers to export GIF/share. UI displays 'Pending Verification' label.",
    "polling": "Client polls run status with exponential backoff and updates leaderboard when verified.",
    "appeals": "If rejected, user receives gentle messaging and an 'Appeal' button which submits run for manual review; manual review queue accessible to operators."
  },

  "analytics_and_kpis": {
    "primary": [
      "plays_per_day",
      "avg_retries_per_session",
      "verification_latency_median",
      "percent_verified",
      "share_rate_per_play",
      "combined_perfect_rate",
      "dropoff_rate_in_tutorial"
    ],
    "targets_initial": {
      "avg_session_seconds": 12,
      "plays_per_user_per_day": 5,
      "day1_retention": ">=35%",
      "share_rate": ">=1%"
    }
  },

  "art_asset_checklist_for_threejs": {
    "models_and_textures": [
      "Block geometry: Box geometry with UVs; neutral material textures (albedo, roughness/metalness optional, ao) sized for resolution tiers",
      "Outline/wireframe texture or an emissive mask for active block",
      "Glow sprite: 256x256 blurred circle for combined-perfect",
      "Particle sprites: shard (thin long), sparkle dot (32x32 or 64x64)",
      "Environment map: low-res HDRI or cube for subtle reflections"
    ],
    "sizes": {
      "thumbnail_render": "200x250 px mock",
      "mobile_high_res": "1024px atlas for blocks",
      "low_end_fallback": "32-bit uncompressed minimal textures"
    },
    "notes": "Prefer simple textures; rely on shader & postprocessing for lighting and glow."
  },

  "performance_and_fallbacks": {
    "instancing": "Use InstancedMesh for the tower blocks; only the active block is unique for shader/outlines.",
    "reduced_mode": "Disable bloom, DOF, heavy particles and use simplified materials if device reports low GPU or user toggles reduced motion.",
    "pooling": "Pool block meshes & particle emitters to avoid allocations.",
    "testing": "Test in-app browser environments early (Android iOS Reddit clients) for performance and shader compatibility."
  },

  "roadmap_and_milestones": {
    "mvp (complete)": [
      "Alternating-axis tower run with polished neon presentation",
      "Shared simulation library reused by client preview and server verification",
      "Replay submission with checksum and background verification pipeline",
      "Per-post leaderboards backed by in-memory sorted sets and compact post metadata",
      "Shared tower gallery with free camera exploration"
    ],
    "phase_1 (immediate)": [
      "Tournament scheduling tools with subreddit-specific rewards",
      "Expanded analytics: streak tracking, accuracy breakdowns, and retention dashboards",
      "Spectator mode for top-player replays with cinematic cameras",
      "Hardening of anti-cheat heuristics and moderation review workflows"
    ],
    "phase_2 (mid_term)": [
      "Global and seasonal leaderboards that span multiple subreddit installs",
      "Custom visual themes and block styles for community expression",
      "Creator hub for sharing highlight reels and curated towers"
    ],
    "phase_3 (long_term)": [
      "User-generated block shapes and challenge rulesets",
      "Community-driven events with live commentary tooling",
      "Partnership-ready monetization hooks if platform policy allows"
    ]
  },

  "risks_and_mitigation_summary": {
    "deterministic_divergence": {
      "risk": "Server/client simulation diverge due to FP/timing differences",
      "mitigation": "Shared TS lib, fixed-point math, PoC parity tests, tolerance policy"
    },
    "platform_limits": {
      "risk": "No WebSocket support, namespaced in-memory store per subreddit, 30-second HTTP timeout",
      "mitigation": "Async verification with optimistic UI, per-post leaderboards by default, and external aggregation when scaling globally"
    },
    "scale_and_storage": {
      "risk": "In-memory store size and command-per-second limits on the platform",
      "mitigation": "Compress replay blobs, apply TTL/eviction policy, keep only top N runs, move historical data to external object storage when needed"
    },
    "user_experience_latency": {
      "risk": "Players dislike wait for verification",
      "mitigation": "Show immediate local score, make sharing possible before verification, display clear status and eventual verification notification"
    }
  },

  "appendices": {
    "sample_fixed_point_concepts": {
      "explanation": "Represent positions and angles as integers using a scale factor (e.g., POS_SCALE = 1000, ANGLE_SCALE = 1000). All operations are integer arithmetic except for table-driven trig approximations (precomputed sin/cos integer tables).",
      "example": "pos_int = Math.round(pos_float * POS_SCALE); angle_int = Math.round(angle_deg * ANGLE_SCALE)"
    },
    "recommended_libraries_and_tools": {
      "client": [
        "react",
        "@react-three/fiber",
        "@react-three/drei",
        "@react-three/postprocessing",
        "three",
        "zustand (or similar) for lightweight state",
        "fflate or pako for gzip/deflate compression in-browser",
        "gif.js or webm encoder for short clip export (client-side)"
      ],
      "server": [
        "node (typescript)",
        "Reddit developer platform quickstart template",
        "ioredis or node-redis for the platform key-value capability",
        "pako/fflate for decompression and compression server-side",
        "worker framework (bullmq or simple worker pool using key-value lists/streams)"
      ]
    },
    "links": {
      "react_three_fiber": "https://docs.pmnd.rs/react-three-fiber/getting-started/introduction",
      "drei": "https://github.com/pmndrs/drei",
      "postprocessing": "https://github.com/vanruesc/postprocessing",
      "reddit_dev_platform_overview": "https://developers.reddit.com/docs/capabilities/devvit-web/devvit_web_overview",
      "reddit_dev_platform_quickstart": "https://developers.reddit.com/docs/0.11/devvit_web/devvit_web_quickstart",
      "reddit_postdata_docs": "https://developers.reddit.com/docs/next/capabilities/server/post-data",
      "reddit_key_value_docs": "https://developers.reddit.com/docs/capabilities/server/redis"
    }
  }
}
